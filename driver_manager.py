import threading
import time
from typing import Dict, Optional, Any
from selenium.webdriver.remote.webdriver import WebDriver
from logger import Logger
from retry_manager import retry_manager

class DriverManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebDriver —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.logger = Logger("driver_manager")
        self._drivers: Dict[int, Dict[str, Any]] = {}
        self._lock = threading.Lock()
        self._cleanup_thread = None
        self._stop_cleanup = threading.Event()
        
    def register_driver(self, thread_id: int, driver: WebDriver) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –¥—Ä–∞–π–≤–µ—Ä —Å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
        with self._lock:
            self._drivers[thread_id] = {
                'driver': driver,
                'alive': True,
                'last_active': time.time()
            }
            self.logger.info(f"‚úÖ –î—Ä–∞–π–≤–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ—Ç–æ–∫–∞ {thread_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            if not self._cleanup_thread or not self._cleanup_thread.is_alive():
                self._start_cleanup_thread()
                
    def get_driver(self, thread_id: int) -> Optional[WebDriver]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –ø–æ ID –ø–æ—Ç–æ–∫–∞ —Å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
        with self._lock:
            driver_info = self._drivers.get(thread_id)
            if driver_info and driver_info['alive']:
                driver_info['last_active'] = time.time()
                return driver_info['driver']
            return None
            
    def get_active_drivers(self) -> Dict[int, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–∞—Ö —Å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
        with self._lock:
            return {
                thread_id: {
                    'alive': info['alive'],
                    'last_active': info['last_active']
                }
                for thread_id, info in self._drivers.items()
            }
            
    def update_activity(self, thread_id: int) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
        with self._lock:
            if thread_id in self._drivers:
                self._drivers[thread_id]['last_active'] = time.time()
                
    def mark_driver_dead(self, thread_id: int) -> None:
        """–ü–æ–º–µ—á–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
        with self._lock:
            if thread_id in self._drivers:
                self._drivers[thread_id]['alive'] = False
                self.logger.info(f"‚ùå –î—Ä–∞–π–≤–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –¥–ª—è –ø–æ—Ç–æ–∫–∞ {thread_id}")
                
    def remove_driver(self, thread_id: int) -> None:
        """–£–¥–∞–ª—è–µ—Ç –¥—Ä–∞–π–≤–µ—Ä —Å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
        with self._lock:
            if thread_id in self._drivers:
                try:
                    driver = self._drivers[thread_id]['driver']
                    driver.quit()
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞ {thread_id}", exc_info=e)
                finally:
                    del self._drivers[thread_id]
                    self.logger.info(f"‚úÖ –î—Ä–∞–π–≤–µ—Ä —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ—Ç–æ–∫–∞ {thread_id}")
                    
    def _start_cleanup_thread(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤"""
        self._stop_cleanup.clear()
        self._cleanup_thread = threading.Thread(target=self._cleanup_loop)
        self._cleanup_thread.daemon = True
        self._cleanup_thread.start()
        
    def _cleanup_loop(self) -> None:
        """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤"""
        while not self._stop_cleanup.is_set():
            try:
                self._cleanup_inactive_drivers()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–æ–≤", exc_info=e)
                
    def _cleanup_inactive_drivers(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã —Å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
        current_time = time.time()
        with self._lock:
            inactive_threads = [
                thread_id for thread_id, info in self._drivers.items()
                if not info['alive'] or (current_time - info['last_active']) > 300  # 5 –º–∏–Ω—É—Ç
            ]
            
            for thread_id in inactive_threads:
                self.logger.warning(f"üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞ {thread_id}")
                self.remove_driver(thread_id)
                
    def cleanup_all(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥—Ä–∞–π–≤–µ—Ä—ã –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏"""
        self._stop_cleanup.set()
        if self._cleanup_thread:
            self._cleanup_thread.join(timeout=5)
            
        with self._lock:
            thread_ids = list(self._drivers.keys())
            for thread_id in thread_ids:
                self.remove_driver(thread_id)
                
    def __enter__(self):
        return self
        
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.cleanup_all()

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
driver_manager = DriverManager() 