import json
import os
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, StaleElementReferenceException, WebDriverException
import time
from typing import Optional, Tuple, List, Dict
from logger import Logger
from credentials_manager import CredentialsManager
from timeout_manager import TimeoutManager
from selenium.webdriver.remote.webdriver import WebDriver
from retry_manager import retry_manager
from telegram_manager import TelegramManager

class AuthManager:
    def __init__(self, driver: WebDriver):
        self.driver = driver
        self.logger = Logger("auth_manager")
        self.timeout_manager = TimeoutManager(driver)
        self.credentials_manager = CredentialsManager()
        self.selectors = self._load_selectors()
        self.wait = WebDriverWait(driver, 10)
        
    def _load_selectors(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('selectors.json', 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            self.logger.warning("‚ö†Ô∏è –§–∞–π–ª —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return {
                "login": {
                    "email_input": ["input[type='email']"],
                    "password_input": ["input[type='password']"],
                    "submit_button": ["button[type='submit']"],
                    "2fa_input": ["input[type='text']"],
                    "2fa_submit": ["button[type='submit']"]
                },
                "dashboard": {
                    "container": [".dashboard-container"],
                    "logout_button": [".logout-button"],
                    "confirm_logout": [".confirm-logout"]
                }
            }
            
    def _find_element(self, selectors: List[str], timeout: int = 10) -> Optional[Tuple[By, str]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–ø–∏—Å–∫—É —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
        
        Args:
            selectors: –°–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
            timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            (—Ç–∏–ø –ª–æ–∫–∞—Ç–æ—Ä–∞, —Å–µ–ª–µ–∫—Ç–æ—Ä) –∏–ª–∏ None
        """
        for selector in selectors:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                if selector.startswith('#'):
                    by = By.ID
                    selector = selector[1:]
                elif selector.startswith('.'):
                    by = By.CLASS_NAME
                    selector = selector[1:]
                elif ':contains(' in selector:
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
                    text = selector.split(':contains(')[1].rstrip(')')
                    by = By.XPATH
                    selector = f"//*[contains(text(), '{text}')]"
                else:
                    by = By.CSS_SELECTOR
                    
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç
                success, element = self.timeout_manager.wait_for_element_presence(by, selector, timeout)
                if success:
                    return by, selector
                    
            except Exception:
                continue
                
        return None
        
    def _wait_for_element(self, selectors: List[str], timeout: int = 10) -> Optional[Tuple[By, str]]:
        """
        –ñ–¥–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å–ø–∏—Å–∫—É —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
        
        Args:
            selectors: –°–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
            timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            (—Ç–∏–ø –ª–æ–∫–∞—Ç–æ—Ä–∞, —Å–µ–ª–µ–∫—Ç–æ—Ä) –∏–ª–∏ None
        """
        try:
            return self._find_element(selectors, timeout)
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞", exc_info=e)
            return None
            
    def _click_element(self, selectors: List[str], timeout: int = 10) -> bool:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∏ –∫–ª–∏–∫–∞–µ—Ç –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
        
        Args:
            selectors: –°–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
            timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            bool: –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            result = self._find_element(selectors, timeout)
            if not result:
                return False
                
            by, selector = result
            success, element = self.timeout_manager.wait_for_element_clickable(by, selector, timeout)
            if success:
                element.click()
                return True
            return False
            
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É", exc_info=e)
            return False
            
    def login(self) -> Tuple[bool, str]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç Binance –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            self.driver.get("https://accounts.binance.com/en/login")
            self.logger.info("üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ Binance")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram
            success, message = self.login_via_telegram()
            if not success:
                return False, message
                
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            success, message = self._wait_for_login_completion()
            if not success:
                return False, message
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
            success, message = self.check_auth_after_login()
            if not success:
                return False, message
                
            return True, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
            
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç", exc_info=e)
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç: {str(e)}"
            
    def wait_for_2fa(self, timeout: int = 300) -> bool:
        """
        –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 2FA
        
        Args:
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            bool: –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            return self.timeout_manager.wait_for_url_contains("dashboard", timeout)
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ 2FA", exc_info=e)
            return False
            
    def is_logged_in(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –≤—Ö–æ–¥
        
        Returns:
            bool: True –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞—à–±–æ—Ä–¥–∞
            result = self._find_element(self.selectors["dashboard"]["container"], timeout=5)
            return result is not None
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Ö–æ–¥–∞", exc_info=e)
            return False
            
    def logout(self) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            bool: –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
            if not self._click_element(self.selectors["dashboard"]["logout_button"]):
                return False
                
            # –ñ–¥–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if not self._click_element(self.selectors["dashboard"]["confirm_logout"]):
                return False
                
            # –ñ–¥–µ–º –≤—ã—Ö–æ–¥–∞
            return self.timeout_manager.wait_for_url_contains("login", timeout=10)
            
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ", exc_info=e)
            return False
            
    def set_credentials(self, email: str, password: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.credentials_manager.set_credentials(email, password)
        self._save_credentials()
        
    def wait_for_2fa(self, timeout: int = 300) -> bool:
        """
        –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 2FA –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        timeout: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        try:
            # –ñ–¥–µ–º, –ø–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç 2FA –∏—Å—á–µ–∑–Ω–µ—Ç –∏–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            WebDriverWait(self.driver, timeout).until(
                lambda driver: self.is_logged_in() or 
                not driver.find_elements(By.CSS_SELECTOR, "input[type='text']")
            )
            return self.is_logged_in()
        except TimeoutException:
            return False 

    @retry_manager.retry_on_exception(
        exceptions=(TimeoutException, NoSuchElementException, StaleElementReferenceException),
        max_retries=3
    )
    def login_via_telegram(self) -> Tuple[bool, str]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –®–∞–≥ 1: –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "Continue with Telegram"
            telegram_button = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[@aria-label='Continue with Telegram']"))
            )
            telegram_button.click()
            self.logger.info("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'Continue with Telegram'")
            
            # –®–∞–≥ 2: –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "Connect" –∏ –Ω–∞–∂–∏–º–∞–µ–º –µ—ë
            connect_button = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[@aria-label='Connect']"))
            )
            connect_button.click()
            self.logger.info("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'Connect'")
            
            # –®–∞–≥ 3: –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (30 —Å–µ–∫—É–Ω–¥)...")
            time.sleep(30)
            
            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "Resend" –∏ –Ω–∞–∂–∏–º–∞–µ–º –µ—ë –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                resend_button = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[@aria-label='Resend']"))
                )
                resend_button.click()
                self.logger.info("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'Resend'")
                time.sleep(30)  # –ñ–¥–µ–º –µ—â–µ 30 —Å–µ–∫—É–Ω–¥
            except TimeoutException:
                self.logger.info("‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ 'Resend' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # –®–∞–≥ 5: –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ "Don't show this message again"
            try:
                checkbox = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.XPATH, "//div[@role='checkbox' and contains(@class, 'stay-signed-in-checkbox')]"))
                )
                checkbox.click()
                self.logger.info("‚úÖ –û—Ç–º–µ—á–µ–Ω —á–µ–∫–±–æ–∫—Å 'Don't show this message again'")
            except TimeoutException:
                self.logger.warning("‚ö†Ô∏è –ß–µ–∫–±–æ–∫—Å 'Don't show this message again' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –®–∞–≥ 6: –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "Yes" –∏ –Ω–∞–∂–∏–º–∞–µ–º –µ—ë
            try:
                yes_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[@aria-label='Yes']"))
                )
                yes_button.click()
                self.logger.info("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'Yes'")
            except TimeoutException:
                self.logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ 'Yes' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –®–∞–≥ 7: –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            success, message = self._wait_for_login_completion()
            if success:
                self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram")
                return True, "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else:
                self.logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {message}")
                return False, message
                
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Telegram", exc_info=e)
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}"
            
    def _wait_for_login_completion(self, timeout: int = 300) -> Tuple[bool, str]:
        """
        –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞
        
        Args:
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ñ–¥–µ–º, –ø–æ–∫–∞ URL –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –¥–∞—à–±–æ—Ä–¥ –∏–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∏–∫–Ω–µ–π–º–æ–º
            WebDriverWait(self.driver, timeout).until(
                lambda driver: (
                    "dashboard" in driver.current_url or
                    len(driver.find_elements(By.CSS_SELECTOR, "#dashboard-userinfo-nickname")) > 0 or
                    len(driver.find_elements(By.XPATH, "//div[contains(@class, 'dashboard-userinfo-nickname')]")) > 0
                )
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º
            try:
                nickname_element = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "#dashboard-userinfo-nickname"))
                )
                nickname = nickname_element.text
                self.logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {nickname}")
                return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {nickname}"
            except TimeoutException:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–ª–∞—Å—Å—É
                try:
                    nickname_element = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'dashboard-userinfo-nickname')]"))
                    )
                    nickname = nickname_element.text
                    self.logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {nickname}")
                    return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {nickname}"
                except TimeoutException:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∏–∫–Ω–µ–π–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∏–∫–Ω–µ–π–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    
        except TimeoutException:
            self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞")
            return False, "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞"
            
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞", exc_info=e)
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞: {str(e)}"
            
    def _is_2fa_required(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ 2FA
        
        Returns:
            bool: True –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è 2FA
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ 2FA
            WebDriverWait(self.driver, 5).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='text']"))
            )
            return True
        except TimeoutException:
            return False
            
    def _handle_2fa(self) -> Tuple[bool, str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 2FA
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ñ–¥–µ–º –≤–≤–æ–¥–∞ 2FA –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            WebDriverWait(self.driver, 300).until(
                lambda driver: not self._is_2fa_required()
            )
            return True, "2FA —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω"
        except TimeoutException:
            return False, "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è 2FA"
            
    def wait_for_2fa(self, timeout: int = 300) -> bool:
        """
        –ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 2FA
        
        Args:
            timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            bool: True –µ—Å–ª–∏ 2FA —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
        """
        try:
            # –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞ 2FA
            WebDriverWait(self.driver, timeout).until(
                lambda driver: not self._is_2fa_required()
            )
            return True
        except TimeoutException:
            return False 

    def find_and_click_telegram_button(self) -> Tuple[bool, str]:
        """
        –ò—â–µ—Ç –∏ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "Continue with Telegram" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                self.driver.refresh()
                self.logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Telegram
                telegram_button = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((
                        By.XPATH,
                        "//button[@aria-label='Continue with Telegram']"
                    ))
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
                WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((
                        By.XPATH,
                        "//button[@aria-label='Continue with Telegram']"
                    ))
                )
                
                # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
                telegram_button.click()
                self.logger.info("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'Continue with Telegram'")
                return True, "–ö–Ω–æ–ø–∫–∞ Telegram —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞"
                
            except TimeoutException:
                self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}: –ö–Ω–æ–ø–∫–∞ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                if attempt < max_attempts - 1:
                    time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                continue
                
            except Exception as e:
                self.logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ Telegram", exc_info=e)
                if attempt < max_attempts - 1:
                    time.sleep(2)
                continue
                
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É Telegram –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫" 

    def find_and_click_connect_button(self) -> Tuple[bool, str]:
        """
        –ò—â–µ—Ç –∏ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "Connect" –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Telegram
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Connect
            connect_button = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((
                    By.XPATH,
                    "//button[@aria-label='Connect' and contains(@class, 'bn-button__primary')]"
                ))
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
            WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((
                    By.XPATH,
                    "//button[@aria-label='Connect' and contains(@class, 'bn-button__primary')]"
                ))
            )
            
            # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
            connect_button.click()
            self.logger.info("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'Connect'")
            return True, "–ö–Ω–æ–ø–∫–∞ Connect —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞"
            
        except TimeoutException:
            self.logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ Connect –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞")
            return False, "–ö–Ω–æ–ø–∫–∞ Connect –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞"
            
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ Connect", exc_info=e)
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ Connect: {str(e)}"
            
    def wait_for_manual_auth(self, timeout: int = 300) -> Tuple[bool, str]:
        """
        –û–∂–∏–¥–∞–µ—Ç —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram –∏ Binance
        
        Args:
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            telegram_manager = TelegramManager()
            if telegram_manager.is_configured():
                telegram_manager.send_message(
                    "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram –∏ Binance\n"
                    "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –≤ –∫–æ–Ω—Å–æ–ª–∏"
                )
                
            self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            self.logger.info("‚ö†Ô∏è –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –≤ –∫–æ–Ω—Å–æ–ª–∏")
            
            # –ñ–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è Enter –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            input("–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            
            self.logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return True, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", exc_info=e)
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
            
    def wait_for_username(self, timeout: int = 30) -> Tuple[bool, str]:
        """
        –û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Args:
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
            selectors = [
                (By.ID, "dashboard-userinfo-nickname"),
                (By.CSS_SELECTOR, ".dashboard-userinfo-nickname"),
                (By.XPATH, "//div[contains(@class, 'dashboard-userinfo-nickname')]"),
                (By.XPATH, "//div[contains(@class, 't-headline5') and contains(@class, 'mb-2')]")
            ]
            
            username_element = None
            for by, selector in selectors:
                try:
                    username_element = WebDriverWait(self.driver, timeout/len(selectors)).until(
                        EC.presence_of_element_located((by, selector))
                    )
                    if username_element:
                        break
                except:
                    continue
                    
            if not username_element:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                try:
                    username_element = WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((
                            By.XPATH,
                            "//div[contains(text(), 'Botir_Nomozov')]"
                        ))
                    )
                except:
                    pass
                    
            if not username_element:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∏–∫–Ω–µ–π–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∏–∫–Ω–µ–π–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
            username = username_element.text
            self.logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {username}")
            return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {username}"
            
        except TimeoutException:
            self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False, "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", exc_info=e)
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"
            
    def check_auth_after_login(self) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞"""
        try:
            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
            self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞...")
            time.sleep(30)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            self.logger.info("üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞...")
            self.driver.get("https://accounts.binance.com/en/login")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if not self.timeout_manager.wait_for_page_load():
                return False, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞"
                
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "Continue with Telegram"
            self.logger.info("üîò –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'Continue with Telegram'...")
            try:
                telegram_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "button.bn-button.bn-button__icon.bn-button__icon__line.data-size-large.icon-button.mt-4"))
                )
                telegram_button.click()
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ Telegram: {str(e)}")
                return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ Telegram"
                
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "Connect"
            self.logger.info("üîò –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'Connect'...")
            try:
                connect_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "button.bn-button.bn-button__primary.data-size-large.w-full.mt-6"))
                )
                connect_button.click()
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ Connect: {str(e)}")
                return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ Connect"
                
            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...")
            time.sleep(30)
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Resend
            while True:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "Resend"
                    self.logger.info("üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ 'Resend'...")
                    try:
                        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
                        selectors = [
                            (By.CSS_SELECTOR, "div.bn-mfa-modal button.bn-button.bn-button__primary.data-size-large.bn-mfa-roaming-button"),
                            (By.XPATH, "//div[contains(@class, 'bn-mfa-modal')]//button[@aria-label='Resend']"),
                            (By.CSS_SELECTOR, "div.bn-mfa-modal button[aria-label='Resend']"),
                            (By.CSS_SELECTOR, "div.bn-mfa-modal button.bn-mfa-roaming-button")
                        ]
                        
                        resend_button = None
                        for by, selector in selectors:
                            try:
                                self.logger.info(f"üîç –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                                resend_button = WebDriverWait(self.driver, 5).until(
                                    EC.presence_of_element_located((by, selector))
                                )
                                if resend_button:
                                    self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                                    break
                            except TimeoutException:
                                self.logger.info(f"‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                                continue
                                
                        if not resend_button:
                            self.logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ 'Resend' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É")
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                            try:
                                elements = self.driver.find_elements(By.TAG_NAME, "button")
                                self.logger.info(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(elements)} –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                                for element in elements:
                                    self.logger.info(f"‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞: {element.get_attribute('outerHTML')}")
                            except Exception as e:
                                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–Ω–æ–ø–æ–∫: {str(e)}")
                            raise TimeoutException("–ö–Ω–æ–ø–∫–∞ 'Resend' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                            
                        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Resend
                        self.logger.info("üîò –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'Resend'...")
                        resend_button.click()
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                        telegram_manager = TelegramManager()
                        if telegram_manager.is_configured():
                            telegram_manager.send_message("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –≤ Binance")
                        
                        # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        time.sleep(30)
                        
                    except TimeoutException:
                        # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ Resend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–µ–∫–±–æ–∫—Å–∞ "Don't show this message again"
                            checkbox = WebDriverWait(self.driver, 5).until(
                                EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='checkbox']"))
                            )
                            if checkbox.is_displayed() and checkbox.is_enabled():
                                self.logger.info("‚úÖ –ù–∞–π–¥–µ–Ω —á–µ–∫–±–æ–∫—Å 'Don't show this message again'")
                                checkbox.click()
                                break
                        except TimeoutException:
                            pass
                            
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "Yes"
                            yes_button = WebDriverWait(self.driver, 5).until(
                                EC.presence_of_element_located((By.CSS_SELECTOR, "button[data-testid='yes-button']"))
                            )
                            if yes_button.is_displayed() and yes_button.is_enabled():
                                self.logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 'Yes'")
                                yes_button.click()
                                break
                        except TimeoutException:
                            pass
                            
                        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                        self.logger.info("‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ 'Resend' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫...")
                        time.sleep(5)
                        
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π Resend: {str(e)}")
                    time.sleep(5)
                    
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            try:
                WebDriverWait(self.driver, 30).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "#dashboard-userinfo-nickname"))
                )
                self.logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return True, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            except TimeoutException:
                self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return False, "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
                return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}" 