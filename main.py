import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import WebDriverException, TimeoutException, NoSuchElementException
import time
import sys
import os
import traceback
import requests
import json
import random
import threading
from queue import Queue
from auth_manager import AuthManager
from page_manager import PageManager
from order_manager import OrderManager
from driver_manager import DriverManager
from screenshot_manager import ScreenshotManager
from telegram_manager import telegram_manager
from vpn_checker import VPNChecker
from env_manager import EnvManager
import base64
from io import BytesIO
from PIL import Image
from logger import Logger
from credentials_manager import CredentialsManager
from typing import Dict

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env = EnvManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = Logger("binance_bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤
driver_manager = DriverManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
options = uc.ChromeOptions()
options.add_argument('--start-maximized')
driver = uc.Chrome(options=options)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
driver_manager.register_driver(1, driver)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ VPN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
vpn_checker = VPNChecker(driver)
success, message = vpn_checker.check_vpn()

if not success:
    logger.error(f"‚ùå {message}")
    if not vpn_checker.wait_for_vpn(timeout=env.get_int("VPN_CHECK_TIMEOUT", 300)):
        logger.critical("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è VPN. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        driver.quit()
        sys.exit(1)

# –ó–∞–≥—Ä—É–∑–∫–∞ URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
def load_urls():
    try:
        with open('config.json', 'r') as f:
            config = json.load(f)
            return config.get('urls', [])
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except json.JSONDecodeError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", exc_info=e)
        return []

def take_screenshot(driver, thread_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
    try:
        screenshot_manager = ScreenshotManager(driver)
        return screenshot_manager.take_screenshot(thread_id)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–ü–æ—Ç–æ–∫ {thread_id})", exc_info=e)
        return None

def check_table_data(driver, thread_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ Telegram
    
    Args:
        driver: WebDriver
        thread_id: ID –ø–æ—Ç–æ–∫–∞
    """
    logger = Logger("main")
    
    try:
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–ü–æ—Ç–æ–∫ {thread_id})...")
        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "tr[data-row-key]"))
        )
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        rows = driver.find_elements(By.CSS_SELECTOR, "tr[data-row-key]")
        
        if not rows:
            logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ (–ü–æ—Ç–æ–∫ {thread_id})")
            return
            
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        row = rows[0]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —è—á–µ–µ–∫
        symbol = row.find_element(By.CSS_SELECTOR, ".name").text
        leverage = row.find_element(By.CSS_SELECTOR, "td[aria-colindex='2']").text
        entry_price = row.find_element(By.CSS_SELECTOR, "td[aria-colindex='3']").text
        mark_price = row.find_element(By.CSS_SELECTOR, "td[aria-colindex='4']").text
        time_element = row.find_element(By.CSS_SELECTOR, "td[aria-colindex='5']").text
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º PNL –∏ –ø—Ä–æ—Ü–µ–Ω—Ç
        pnl_cell = row.find_element(By.CSS_SELECTOR, "td[aria-colindex='6']")
        pnl_elements = pnl_cell.find_elements(By.CSS_SELECTOR, ".Number")
        pnl = pnl_elements[0].text if len(pnl_elements) > 0 else "N/A"
        pnl_percent = pnl_elements[1].text if len(pnl_elements) > 1 else "N/A"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–ü–æ—Ç–æ–∫ {thread_id}):\n\n"
            f"–°–∏–º–≤–æ–ª: {symbol}\n"
            f"–ü–ª–µ—á–æ: {leverage}x\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {mark_price}\n"
            f"–í—Ä–µ–º—è: {time_element}\n"
            f"PNL: {pnl}\n"
            f"PNL %: {pnl_percent}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        telegram_manager.send_message(message)
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram (–ü–æ—Ç–æ–∫ {thread_id})")
        
    except TimeoutException:
        logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã (–ü–æ—Ç–æ–∫ {thread_id})")
    except NoSuchElementException as e:
        logger.error(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–ü–æ—Ç–æ–∫ {thread_id}): {str(e)}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã (–ü–æ—Ç–æ–∫ {thread_id})", exc_info=e)

def open_binance_page(url, thread_id):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥—Ä–∞–π–≤–µ—Ä
        driver = driver_manager.get_driver(thread_id)
        if not driver:
            logger.error(f"‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ—Ç–æ–∫–∞ {thread_id}")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        page_manager = PageManager(driver)
        auth_manager = AuthManager(driver)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º VPN
        vpn_checker = VPNChecker(driver)
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN...")
        logger.info("–ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞–∂–º–∏—Ç–µ Enter –≤ –∫–æ–Ω—Å–æ–ª–∏")
        input()
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é VPN")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ Binance
        logger.info("üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ Binance...")
        driver.get("https://accounts.binance.com/en/login")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if not page_manager.wait_for_page_load():
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞ (–ü–æ—Ç–æ–∫ {thread_id})")
            return
            
        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ Binance —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ (–ü–æ—Ç–æ–∫ {thread_id})")
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        logger.info("–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –≤ –∫–æ–Ω—Å–æ–ª–∏")
        input()
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ (–ü–æ—Ç–æ–∫ {thread_id})...")
        try:
            WebDriverWait(driver, 30).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "#dashboard-userinfo-nickname"))
            )
            nickname = driver.find_element(By.CSS_SELECTOR, "#dashboard-userinfo-nickname").text
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {nickname} (–ü–æ—Ç–æ–∫ {thread_id})")
            
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            logger.info("‚è≥ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            success, message = auth_manager.check_auth_after_login()
            if not success:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {message}")
                return
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except TimeoutException:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∏–∫–Ω–µ–π–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ü–æ—Ç–æ–∫ {thread_id})")
            return
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ü–æ—Ç–æ–∫ {thread_id})", exc_info=e)
            return
            
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ URL –∏–∑ JSON
        logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL: {url} (–ü–æ—Ç–æ–∫ {thread_id})")
        driver.get(url)
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if not page_manager.wait_for_page_load():
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {url} (–ü–æ—Ç–æ–∫ {thread_id})")
            return
            
        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {url} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ (–ü–æ—Ç–æ–∫ {thread_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö —á–µ—Ä–µ–∑ Telegram
        check_table_data(driver, thread_id)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ü–æ—Ç–æ–∫ {thread_id})", exc_info=e)

def start_multiple_pages():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü Binance –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º URL –∏–∑ JSON —Ñ–∞–π–ª–∞
        with open('urls.json', 'r') as f:
            urls_data = json.load(f)
            urls = urls_data.get('urls', [])
        
        if not urls:
            logger.error("‚ùå –ù–µ—Ç URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ —Ñ–∞–π–ª–µ urls.json")
            return
            
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ URL
        threads = []
        for i, url in enumerate(urls, 1):
            thread = threading.Thread(
                target=open_binance_page,
                args=(url, i),
                name=f"BinancePage_{i}"
            )
            threads.append(thread)
            thread.start()
            logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ {i} –¥–ª—è URL: {url}")
            
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()
            
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü", exc_info=e)
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥—Ä–∞–π–≤–µ—Ä—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        driver_manager.cleanup_all()

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
    logger = Logger("main")
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    telegram_manager.start_polling()
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        telegram_manager.register_command("/start", handle_start_command)
        telegram_manager.register_command("/help", handle_help_command)
        telegram_manager.register_command("/url", handle_url_command)
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
        start_multiple_pages()
        
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", exc_info=e)
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞
        telegram_manager.stop_polling()
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def handle_start_command(message: Dict) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message["chat_id"]
    telegram_manager.send_message(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/credentials - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n"
        "/help - –ü–æ–º–æ—â—å",
        chat_id
    )

def handle_help_command(message: Dict) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    chat_id = message["chat_id"]
    telegram_manager.send_message(
        "üìö –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /url –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º URL:\n"
        "   /url add <url> - –î–æ–±–∞–≤–∏—Ç—å URL\n"
        "   /url list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ URL\n"
        "   /url remove <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å URL\n"
        "   /url clear - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ URL\n\n"
        "2. –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç –∏—Ö\n"
        "3. –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç",
        chat_id
    )

def handle_credentials_command(message: Dict) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /credentials"""
    chat_id = message["chat_id"]
    text = message["text"]
    
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
        parts = text.split(maxsplit=2)
        if len(parts) < 2:
            telegram_manager.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/credentials set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>\n"
                "/credentials clear",
                chat_id
            )
            return
            
        action = parts[1].lower()
        
        if action == "set":
            if len(parts) != 3:
                telegram_manager.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "/credentials set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>",
                    chat_id
                )
                return
                
            credentials = parts[2].split()
            if len(credentials) != 2:
                telegram_manager.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "/credentials set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>",
                    chat_id
                )
                return
                
            username, password = credentials
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            env_manager = EnvManager()
            env_manager.set_credentials(username, password)
            
            telegram_manager.send_message(
                f"‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
                f"–õ–æ–≥–∏–Ω: {username}",
                chat_id
            )
            
        elif action == "clear":
            # –û—á–∏—Å—Ç–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            env_manager = EnvManager()
            env_manager.clear_credentials()
            
            telegram_manager.send_message(
                "‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã",
                chat_id
            )
            
        else:
            telegram_manager.send_message(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/credentials set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>\n"
                "/credentials clear",
                chat_id
            )
            
    except Exception as e:
        logger = Logger("main")
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã credentials", exc_info=e)
        telegram_manager.send_message(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã",
            chat_id
        )

def handle_url_command(message: Dict) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /url –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º URL"""
    chat_id = message["chat_id"]
    text = message.get("text", "")
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if text == "/url":
            telegram_manager.send_message(
                "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL:\n\n"
                "/url add <url> - –î–æ–±–∞–≤–∏—Ç—å URL\n"
                "/url list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ URL\n"
                "/url remove <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å URL –ø–æ –Ω–æ–º–µ—Ä—É\n"
                "/url clear - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ URL",
                chat_id
            )
            return
            
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = text.split(maxsplit=2)
        if len(parts) < 2:
            telegram_manager.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /url –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                chat_id
            )
            return
            
        action = parts[1].lower()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ URL
        try:
            with open('urls.json', 'r') as f:
                urls_data = json.load(f)
                urls = urls_data.get('urls', [])
        except FileNotFoundError:
            urls = []
            
        if action == "add":
            if len(parts) != 3:
                telegram_manager.send_message(
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!\n"
                    "–ü—Ä–∏–º–µ—Ä: /url add https://www.binance.com/en/my/wallet/account",
                    chat_id
                )
                return
                
            new_url = parts[2]
            if new_url in urls:
                telegram_manager.send_message(
                    "‚ö†Ô∏è –≠—Ç–æ—Ç URL —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ",
                    chat_id
                )
                return
                
            urls.append(new_url)
            telegram_manager.send_message(
                f"‚úÖ URL –¥–æ–±–∞–≤–ª–µ–Ω:\n{new_url}",
                chat_id
            )
            
        elif action == "list":
            if not urls:
                telegram_manager.send_message(
                    "üìù –°–ø–∏—Å–æ–∫ URL –ø—É—Å—Ç",
                    chat_id
                )
                return
                
            message = "üìù –°–ø–∏—Å–æ–∫ URL:\n\n"
            for i, url in enumerate(urls, 1):
                message += f"{i}. {url}\n"
            telegram_manager.send_message(message, chat_id)
            
        elif action == "remove":
            if len(parts) != 3:
                telegram_manager.send_message(
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!\n"
                    "–ü—Ä–∏–º–µ—Ä: /url remove 1",
                    chat_id
                )
                return
                
            try:
                index = int(parts[2]) - 1
                if 0 <= index < len(urls):
                    removed_url = urls.pop(index)
                    telegram_manager.send_message(
                        f"‚úÖ URL —É–¥–∞–ª–µ–Ω:\n{removed_url}",
                        chat_id
                    )
                else:
                    telegram_manager.send_message(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä URL!",
                        chat_id
                    )
            except ValueError:
                telegram_manager.send_message(
                    "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!",
                    chat_id
                )
                return
                
        elif action == "clear":
            urls = []
            telegram_manager.send_message(
                "‚úÖ –°–ø–∏—Å–æ–∫ URL –æ—á–∏—â–µ–Ω",
                chat_id
            )
            
        else:
            telegram_manager.send_message(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /url –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                chat_id
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ URL
        with open('urls.json', 'w') as f:
            json.dump({"urls": urls}, f, indent=4)
            
    except Exception as e:
        logger = Logger("main")
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã url", exc_info=e)
        telegram_manager.send_message(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã",
            chat_id
        )

if __name__ == "__main__":
    main()
